{
  "_args": [
    [
      "adc-pi-spi@0.0.1",
      "/home/jared/Source/GrillKeeper"
    ]
  ],
  "_from": "adc-pi-spi@0.0.1",
  "_id": "adc-pi-spi@0.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/adc-pi-spi",
  "_npmUser": {
    "email": "npm@fehmer.info",
    "name": "fehmer"
  },
  "_npmVersion": "1.3.5",
  "_phantomChildren": {
    "bindings": "1.2.1"
  },
  "_requested": {
    "name": "adc-pi-spi",
    "raw": "adc-pi-spi@0.0.1",
    "rawSpec": "0.0.1",
    "scope": null,
    "spec": "0.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/adc-pi-spi/-/adc-pi-spi-0.0.1.tgz",
  "_shasum": "f43ffd84e5fe30eebe58acdf7bf834e20d90daaf",
  "_shrinkwrap": null,
  "_spec": "adc-pi-spi@0.0.1",
  "_where": "/home/jared/Source/GrillKeeper",
  "author": {
    "name": "Christian Fehmer"
  },
  "bugs": {
    "url": "https://github.com/fehmer/adc-pi-spi/issues"
  },
  "dependencies": {
    "coffee-script": "",
    "node-spi": "git://github.com/rosterloh/node-spi.git#master"
  },
  "description": "Using an ADC (MCP3008) with a Pi over spi",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "f43ffd84e5fe30eebe58acdf7bf834e20d90daaf",
    "tarball": "http://registry.npmjs.org/adc-pi-spi/-/adc-pi-spi-0.0.1.tgz"
  },
  "keywords": [
    "adc",
    "mcp3008",
    "pi",
    "raspberry",
    "spi",
    "spi-dev"
  ],
  "license": "BSD",
  "main": "./lib/index.coffee",
  "maintainers": [
    {
      "name": "fehmer",
      "email": "npm@fehmer.info"
    }
  ],
  "name": "adc-pi-spi",
  "optionalDependencies": {},
  "readme": "#     Read ADC (MCP3008) using spi\r\n\r\nRead values from an MCP3008 connected to an raspberry pi using spidev\r\n\r\n## Usage / Example\r\n\r\n\r\n```coffeescript\r\nADC = require 'adc-pi-spi'\r\noptions =\r\n\ttolerance: 10\t\t#default = 10\r\n\tpollInterval: 200\t#default = 200\r\n\tchannels: [0,1,2,3]\t#default = [0]\r\n\r\nadc=new ADC('/dev/spidev0.0', options)\r\n\r\nadc.on 'change', (channel, value)->\r\n\tconsole.log 'channel ', channel, 'is now', value\r\n\r\nprocess.on 'SIGTERM', () ->\r\n\tadc.close()\r\n\r\nprocess.on 'SIGINT', () ->\r\n\tadc.close()\r\n\r\nprocess.on 'exit', () ->\r\n\tadc.close()\r\n```\r\n\r\n## API\r\n\r\n  - [ADC(device:String,[options:Array])](#adcdevicestringoptionsarray)\r\n  - [ADC.state([channel:Number])](#adcstatechannelnumber)\r\n  - [ADC.close()](#adcclose)\r\n  - [ADC.read(channel, callbackfunction))](#adcreadchannelnumber-callback-function)\r\n\r\n## ADC(device:String,[options:Array])\r\n\r\n  Setting up a new ADC. Options are optional. The device name is the full path to the spi device, like /dev/spidev0.0\r\n  \r\n```coffeescript\r\noptions =\r\n\ttolerance: 10\t\t#default = 10\r\n\tpollInterval: 200\t#default = 200\r\n\tchannels: [0,1,2,3]\t#default = [0]\r\n\r\nadc=new ADC('/dev/spidev0.0', options)\r\n```\r\n\r\n\r\n\r\n## ADC.state([channel:Number])\r\n\r\nRetrieve the current state of the inputs. \r\nIf no channel is given, the function will return the values of all defined channels (see options). \r\nIf a channel is given, the function will return only the value of the choosen channel.\r\n\r\nThe values are absolute values from the adc (e.g. 0..1023 if you are using a 10Bit chip)\r\n\r\n## ADC.close()\r\n\r\n  Close the spi device\r\n\r\n## ADC.read(channel:Number, callback: function())\r\n\r\nRead the current value of the channel. Note: state() uses the buffered state which is updated automatically each pollInterval (see options). Read always reads the actual data without updating the state().\r\n\r\n## Options\r\n\r\n- tolerance\r\n\r\n    Change-Event will not fire if the difference between the current and the last value is lower than the tolerance\r\n\r\n- pollInterval\r\n\r\n\tThe ADC is polled every pollInterval milliseconds.\r\n\r\n- channels\r\n\r\n\tThe ADC channels to monitor, state() and events only contains theese channels\r\n\r\n## Events\r\n\r\n- change\r\n\r\n\tFires if a channel value changes more than the tolerance value. The events has two parameters:\r\n    \r\n\t* channel: Number the number of the channel which changed\r\n\t* value: Number the absolute value of the channel\r\n\r\n    ### Example\r\n```coffeescript\r\nadc.on 'change', (channel, value)->\r\nconsole.log 'channel ', channel, 'is now', value\r\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/fehmer/adc-pi-spi.git"
  },
  "version": "0.0.1"
}
